on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      environment:
        required: true
        type: string
      docker-services:
        required: false
        type: string
      pytest-arguments:
        required: false
        type: string
      workers:
        default: 4
        type: number
      timeout-minutes:
        default: 30
        type: number
    secrets:
      SNOWFLAKE_PASSWORD:
        required: false
      SNOWFLAKE_ACCOUNT:
        required: false
      SNOWFLAKE_USER:
        required: false

jobs:
  test:
    name: pytest
    runs-on: ${{ inputs.os }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Pixi
        uses: prefix-dev/setup-pixi@v0.8.10
        with:
          environments: ${{ inputs.environment }}

      - name: Start Docker Compose
        if: ${{ inputs.docker-services != '' }}
        uses: isbang/compose-action@40041ff1b97dbf152cd2361138c2b03fa29139df
        with:
          compose-file: docker-compose.yaml
          services: ${{ inputs.docker-services }}

      - name: Install Microsoft ODBC
        if: ${{ contains(inputs.docker-services, 'mssql') }}
        run: |
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools18
          echo /opt/mssql-tools18/bin >> $GITHUB_PATH

      - name: Test BCP
        if: ${{ contains(inputs.docker-services, 'mssql') }}
        run: bcp -v

      - name: Wait for Docker Servers
        if: ${{ inputs.docker-services != '' }}
        run: |
          until bash ./.github/scripts/docker_compose_ready.sh; do
            sleep 1
          done

      - name: Run tests
        env:
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          PREFECT_API_URL: http://127.0.0.1:4200/api
          PREFECT_SERVER_ALLOW_EPHEMERAL_MODE: false
          ERROR_ONLY: 1
          LOG_TEST_NAME: 0
        run: |
          pixi run -e ${{ inputs.environment }} pytest tests ${RUNNER_DEBUG:+-v} --color=yes --workers=${{ inputs.workers }} ${{ inputs.pytest-arguments }}
