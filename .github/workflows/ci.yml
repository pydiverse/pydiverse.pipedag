name: Tests

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - '**'
  pull_request:
    paths-ignore:
      - 'docs/**'
    branches:
      - '**'

jobs:

  Linting:
    name: "Linting - pre-commit hooks - Python 3.8"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - name: Install Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Linting - Run pre-commit checks
        uses: pre-commit/action@v3.0.0

  Tests:
    name: "${{ matrix.os }} / ${{ matrix.python-version }}"
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 30
    strategy:
      matrix:
        os: [Ubuntu]
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Checkout branch
        uses: actions/checkout@v2.3.5
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        shell: bash
        run: |
          curl -fsS -o install-poetry.py https://raw.githubusercontent.com/sdispater/poetry/master/install-poetry.py
          python install-poetry.py

      - name: Update PATH
        if: ${{ matrix.os != 'Windows' }}
        shell: bash
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'Windows' }}
        shell: bash
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: poetry install -vvv

      - name: Start Docker Compose
        uses: isbang/compose-action@v1.4.1
        with:
          compose-file: ./docker-compose.yaml

      - name: Wait for Docker Servers
        shell: bash
        run: sleep 2

      - name: Test
        shell: bash
        run: |
          # poetry run pytest -q tests
          poetry run pytest -s tests  # interactive log output
