name: pipedag_tests
strict_instance_lookup: true  # default value: true
_table_store_connections:
  postgres: &db_postgres
    # Postgres: this can be used after running `docker-compose up`
    url: "postgresql://{$POSTGRES_USERNAME}:{$POSTGRES_PASSWORD}@127.0.0.1:6543/{instance_id}"

  postgres2: &db_postgres2
    url: "postgresql://{username}:{password}@{host}:{port}/{instance_id}"
    url_attrs_file: "{$POSTGRES_PASSWORD_CFG}"

  mssql: &db_mssql
    # SQL Server: this can be used after running `docker-compose up`
    url: "mssql+pyodbc://sa:PidyQuant27@127.0.0.1:1433/master?driver=ODBC+Driver+18+for+SQL+Server&encrypt=no"
    # schema_prefix: "master."  # SQL Server needs database.schema (uncomment only on of prefix and suffix)
    schema_prefix: "{instance_id}_"  # SQL Server needs database.schema (uncomment only on of prefix and suffix)
    schema_suffix: ".dbo"   # Alternatively SQL Server databases can be used as schemas with .dbo default schema

_blob_store_connections:
  file: &blob_file
    base_path: "/tmp/pipedag/blobs"

_technical_setups:
  default: &technical_setup_default
    # listen-interface for pipedag context server which synchronizes some task state during DAG execution
    network_interface: "127.0.0.1"
    # classes to be materialized to table store even without pipedag Table wrapper (we have loose coupling between
    # pipedag and pydiverse.transform, so consider adding 'pydiverse.transform.Table' in your config)
    auto_table: ["pandas.DataFrame", "sqlalchemy.Table"]
    # abort as fast a possible on task failure and print most readable stack trace
    fail_fast: true

    instance_id: pipedag_default
    table_store:
      # Postgres: this can be used after running `docker-compose up`
      <<: *db_postgres
      create_database_if_not_exists: True

      ## SQL Server: this can be used after running `docker-compose up`
      #<<: *db_mssql

      class: "pydiverse.pipedag.backend.table.SQLTableStore"

      # print select statements before being encapsualted in materialize expressions and tables before writing to
      # database
      print_materialize: true
      # print final sql statements
      print_sql: true

    blob_store:
      class: "pydiverse.pipedag.backend.blob.FileBlobStore"
      <<: *blob_file

    lock_manager:
      class: "pydiverse.pipedag.backend.lock.ZooKeeperLockManager"
      hosts: "localhost:2181"

    orchestration:
      class: "pydiverse.pipedag.engine.SequentialEngine"
      ## Activate this class to work either with prefect 1.3.0 or prefect 2.0
      # class: "pydiverse.pipedag.engine.PrefectEngine"

_instances: &instances
  __any__:
    <<: *technical_setup_default
    # The following Attributes are handed over to the flow implementation (pipedag does not care)
    attrs:
      # by default we load source data and not a sampled version of a loaded database
      copy_filtered_input: false

  full:
    # Full dataset is using default database connection and schemas
    instance_id: pipedag_full
    table_store:
      <<: *db_postgres2
    # Run this instance under @pytest.mark.slow5
    tags: pytest_mark_slow5

  midi:
    # Full dataset is using default database connection and schemas
    instance_id: pipedag_midi
    attrs:
      # copy filtered input from full instance
      copy_filtered_input: true
      copy_source: full
      copy_per_user: false
      copy_filter_cnt: 2  # this is just dummy input where we sample 2 rows

    # Run this instance under @pytest.mark.slow4
    tags: pytest_mark_slow4
    # Run only stage_2 under @pytest.mark.slow3
    stage_tags:
      pytest_mark_slow3:
        - simple_flow_stage2

  mini:
    # Full dataset is using default database connection and schemas
    instance_id: pipedag_mini
    attrs:
      copy_filtered_input: true
      copy_source: full
      copy_per_user: false
      copy_filter_cnt: 1  # this is just dummy input where we sample 1 row

    # Run this instance under @pytest.mark.slow2
    tags: pytest_mark_slow2
    # Run only stage_2 under @pytest.mark.slow1
    stage_tags:
      pytest_mark_slow1:
        - simple_flow_stage2

  mssql:
    # Full dataset is using default database connection and schemas
    table_store:
      table_store_connection: mssql

flows:
  __any__:
    instances: *instances
  test_instance_selection:
    instances:
      full:
        schema_suffix: "_full"
    schema_prefix: "instance_selection_"
